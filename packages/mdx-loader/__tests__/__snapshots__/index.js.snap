// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fusuma-loader should add background to props 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    {
    /* background: red */
  }
    
            </>];
export const backgrounds = ['red'];
export const fragmentSteps = [0];
export const fusumaProps = [{}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    {
      /* background: red */
    }

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should add background(url) to props 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    {
    /* background: '../../img.jpeg' */
  }
    
            </>];
export const backgrounds = [require('../../img.jpeg')];
export const fragmentSteps = [0];
export const fusumaProps = [{}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    {
      /* background: '../../img.jpeg' */
    }

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should add fusuma options 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    {
    /* note
    This is Note!
    */
  }
    {
    /* classes: class! */
  }
    {
    /* section-title: section-title! */
  }
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">Hello</Chakra.Heading>
    {
    /* content */
  }
    
            </>];
export const backgrounds = [0];
export const fragmentSteps = [0];
export const fusumaProps = [{
  note: 'This is Note!',
  classes: 'class!',
  sectionTitle: 'section-title!'
}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    {
      /* note
      This is Note!
      */
    }
    {
      /* classes: class! */
    }
    {
      /* section-title: section-title! */
    }
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">Hello</Chakra.Heading>
    {
      /* content */
    }

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should append div tag by block comment 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    <div>
      <p><Chakra.Text>{\`out\`}</Chakra.Text></p>
      <div className=\\"foo\\">
        <p><Chakra.Text>{\`in\`}</Chakra.Text></p>
        <div className=\\"foo bar baz\\">
          <p><Chakra.Text>{\`core\`}</Chakra.Text></p>
        </div>
        <p><Chakra.Text>{\`in\`}</Chakra.Text></p>
      </div>
      <p><Chakra.Text>{\`out\`}</Chakra.Text></p>
    </div>
    
            </>];
export const backgrounds = [0];
export const fragmentSteps = [0];
export const fusumaProps = [{}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    <div>
      <p><Chakra.Text>{\`out\`}</Chakra.Text></p>
      <div className=\\"foo\\">
        <p><Chakra.Text>{\`in\`}</Chakra.Text></p>
        <div className=\\"foo bar baz\\">
          <p><Chakra.Text>{\`core\`}</Chakra.Text></p>
        </div>
        <p><Chakra.Text>{\`in\`}</Chakra.Text></p>
      </div>
      <p><Chakra.Text>{\`out\`}</Chakra.Text></p>
    </div>

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should convert all img src 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">img src</Chakra.Heading>
    <div>
  <img src={require(\\"random.gif\\")} alt=\\"random\\" />
  <img src={require(\\"random2.png\\")} alt=\\"random2\\" />
  <img src={require(\\"random3.svg\\")} alt=\\"random3\\" />
    </div>
  
    
            </>];
export const backgrounds = [0];
export const fragmentSteps = [0];
export const fusumaProps = [{}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">img src</Chakra.Heading>
    <div>
  <img src={require(\\"random.gif\\")} alt=\\"random\\" />
  <img src={require(\\"random2.png\\")} alt=\\"random2\\" />
  <img src={require(\\"random3.svg\\")} alt=\\"random3\\" />
    </div>
  

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should convert class to className 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">Class</Chakra.Heading>
    <div className=\\"test\\">
  <div className=\\"test2\\">
    <h2 className=\\"test3\\">hello</h2>
  </div>
    </div>
  
    
            </>];
export const backgrounds = [0];
export const fragmentSteps = [0];
export const fusumaProps = [{}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">Class</Chakra.Heading>
    <div className=\\"test\\">
  <div className=\\"test2\\">
    <h2 className=\\"test3\\">hello</h2>
  </div>
    </div>
  

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should convert emoji 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">ðŸ˜„</Chakra.Heading>
    
            </>, props => <>
              
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">ðŸ˜„</Chakra.Heading>
    
            </>];
export const backgrounds = [0, 0];
export const fragmentSteps = [0, 0];
export const fusumaProps = [{}, {}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">ðŸ˜„</Chakra.Heading>
    <hr></hr>
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">ðŸ˜„</Chakra.Heading>

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should convert markdown-syntax image to JSX 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    <p><img src={require('/tmp/withAlt.jpg')} {...{
      \\"alt\\": \\"Alt\\"
    }}></img><Chakra.Text>{\`
\`}</Chakra.Text><img src={require('/tmp/withoutAlt.jpg')}></img><Chakra.Text>{\`
\`}</Chakra.Text><img src={require('/tmp/style.jpg')} style={{
      \\"height\\": \\"100%\\"
    }}></img><Chakra.Text>{\`
\`}</Chakra.Text><img src={require('/tmp/style.jpg?dont=delete')} style={{
      \\"height\\": \\"100px\\",
      \\"width\\": \\"100%\\"
    }}></img><Chakra.Text>{\`
  \`}</Chakra.Text></p>
    
            </>];
export const backgrounds = [0];
export const fragmentSteps = [0];
export const fusumaProps = [{}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    <p><img src={require('/tmp/withAlt.jpg')} {...{
        \\"alt\\": \\"Alt\\"
      }}></img><Chakra.Text>{\`
\`}</Chakra.Text><img src={require('/tmp/withoutAlt.jpg')}></img><Chakra.Text>{\`
\`}</Chakra.Text><img src={require('/tmp/style.jpg')} style={{
        \\"height\\": \\"100%\\"
      }}></img><Chakra.Text>{\`
\`}</Chakra.Text><img src={require('/tmp/style.jpg?dont=delete')} style={{
        \\"height\\": \\"100px\\",
        \\"width\\": \\"100%\\"
      }}></img><Chakra.Text>{\`
  \`}</Chakra.Text></p>

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should return normal md 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */

import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">1</Chakra.Heading>
    
            </>, props => <>
              
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">2</Chakra.Heading>
    
            </>];
export const backgrounds = [0, 0];
export const fragmentSteps = [0, 0];
export const fusumaProps = [{}, {}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">1</Chakra.Heading>
    <hr></hr>
    <Chakra.Heading as=\\"h1\\" fontSize=\\"var(--h1-font-size)\\" fontWeight=\\"var(--h1-font-weight)\\">2</Chakra.Heading>

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;

exports[`fusuma-loader should return normal mdx 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
import { Sample } from './Sample';
import React from 'react';
import { mdx } from '@mdx-js/react';
import * as Client from '@fusuma/client';
import * as Icons from 'react-icons/fa';
import * as Chakra from '@chakra-ui/react';
import { motion as Motion } from 'framer-motion';
export const slides = [props => <>
              

    <Sample mdxType=\\"Sample\\" mdxType=\\"Sample\\" />
    
    
            </>];
export const backgrounds = [0];
export const fragmentSteps = [0];
export const fusumaProps = [{}];

const layoutProps = {
  
};
const MDXLayout = \\"wrapper\\"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\\"MDXLayout\\">

    <Sample mdxType=\\"Sample\\" />
    

    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;"
`;
